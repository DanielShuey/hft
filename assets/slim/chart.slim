ruby:
  def parsed_data
    @parsed_data ||= JSON.parse(mock_data)
  end

  def averages
    @averages ||= parsed_data.map { |x| x['weightedAverage'] }
  end

  def times
    @times ||= parsed_data.map { |x| x['date'] }
  end

  def ohlc_array
    parsed_data.map do |x|
      [:open, :high, :low, :close].map { |f| x[f.to_s] }
    end
  end

  def long_array
    @long_array ||= averages.each_cons(6).map do |x|
      x.sma
    end
  end

  def short_array
    @short_array ||= averages.each_cons(3).map do |x|
      x.ema
    end
  end

script type="text/javascript"
  == "window.ohlc_data = [" + times.zip(ohlc_array).map { |x| "\n{\nx: new Date(#{x[0] * 1000}),\ny: #{x[1]}\n}" }.join(',') + "];"
  == "window.average_data = [" + times.zip(averages).map { |x| "\n{\nx: new Date(#{x[0] * 1000}),\ny: #{x[1]}\n}" }.join(',') + "];"
  == "window.long_data = [" + times[(ohlc_array.length-long_array.length)..-1].zip(long_array).map { |x| "\n{\nx: new Date(#{x[0] * 1000}),\ny: #{x[1]}\n}" }.join(',') + "];"
  == "window.short_data = [" + times[(ohlc_array.length-short_array.length)..-1].zip(short_array).map { |x| "\n{\nx: new Date(#{x[0] * 1000}),\ny: #{x[1]}\n}" }.join(',') + "];"

coffee:
  window.onload = ->
    chart = new (CanvasJS.Chart)('chart',
      zoomEnabled: false
      exportEnabled: false
      backgroundColor: '#000'
      axisY:
        includeZero: false
        prefix: '$'
        lineThickness: 0
        gridThickness: 0.5
        gridDashType: 'dash'
        labelFontSize: 12
        labelFontFamily: 'Roboto Mono'
        labelFontColor: '#fff'
        margin: 0
        tickLength: 0
      axisX:
        interval: 2
        intervalType: 'hour'
        valueFormatString: 'DDD hh:mmtt'
        lineThickness: 0
        gridThickness: 0.5
        gridDashType: 'dash'
        labelFontSize: 12
        labelFontFamily: 'Roboto Mono'
        labelFontColor: '#fff'
        margin: 0
        tickLength: 0
      toolTip:
        shared: true
      data: [{
          type: 'candlestick'
          color: '#2c97de'
          risingColor: '#84b547'
          fallingColor: '#cc3e4a'
          dataPoints: @ohlc_data
        },        
        {
          type: 'line'
          color: '#ccc'
          markerType: 'none'
          dataPoints: @average_data
        },
        {
          type: 'spline'
          color: '#2c97de'
          markerType: 'none'
          dataPoints: @long_data
        },
        {
          type: 'spline'
          color: '#e76d3b'
          markerType: 'none'
          dataPoints: @short_data
        }
      ]
    )
    chart.render()
    return
